const fs = require('fs');
const path = require('path');

// цЫ┤цЦ░APIхПВшАГщб╡щЭвчЪДхоМцХ┤ч┐╗шпС
function updateAPIReferenceComplete() {
  const filePath = path.join(__dirname, '..', 'src', 'app', '[locale]', 'docs', 'api-reference', 'page.tsx');
  
  console.log('ЁЯФз цЫ┤цЦ░APIхПВшАГщб╡щЭвчЪДхоМцХ┤ч┐╗шпС...');
  
  let content = fs.readFileSync(filePath, 'utf8');
  
  // ф╕║цпПчзНшпншиАц╖╗хКахоМцХ┤чЪДAPIщГихИЖ
  const languages = {
    hi: {
      coreApi: 'рдХреЛрд░ API',
      coreApiDesc: 'Gemini рдореЙрдбрд▓ рдХреЗ рд╕рд╛рде рдЗрдВрдЯрд░реИрдХреНрдЯ рдХрд░рдиреЗ рдФрд░ рдмрд╛рддрдЪреАрдд рдкреНрд░рдмрдВрдзрд┐рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдореБрдЦреНрдп API',
      pluginApi: 'рдкреНрд▓рдЧрдЗрди API',
      pluginApiDesc: 'рдХрд╕реНрдЯрдо рдкреНрд▓рдЧрдЗрдиреНрд╕ рдФрд░ рдПрдХреНрд╕рдЯреЗрдВрд╢рди рд╡рд┐рдХрд╕рд┐рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП API',
      configApi: 'рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рди API',
      configApiDesc: 'CLI рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рди рдФрд░ рд╕реЗрдЯрд┐рдВрдЧреНрд╕ рдкреНрд░рдмрдВрдзрд┐рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП API',
      toolsApi: 'рдЯреВрд▓реНрд╕ API',
      toolsApiDesc: 'рдмрд┐рд▓реНрдЯ-рдЗрди рдЯреВрд▓реНрд╕ рдкреНрд░рдмрдВрдзрд┐рдд рдФрд░ рдирд┐рд╖реНрдкрд╛рджрд┐рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП API',
      
      chatDesc: 'Gemini рдХреЗ рд╕рд╛рде рдЗрдВрдЯрд░реИрдХреНрдЯрд┐рд╡ рдЪреИрдЯ рд╕реЗрд╢рди рд╢реБрд░реВ рдХрд░реЗрдВ',
      askDesc: 'рдПрдХ рдкреНрд░реЙрдореНрдкреНрдЯ рднреЗрдЬреЗрдВ рдФрд░ рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ',
      analyzeDesc: 'AI рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рд╕рд╛рде рдлрд╝рд╛рдЗрд▓реЛрдВ рдпрд╛ рдХреЛрдб рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░реЗрдВ',
      registerPluginDesc: 'CLI рдХреЗ рд╕рд╛рде рдирдпрд╛ рдкреНрд▓рдЧрдЗрди рд░рдЬрд┐рд╕реНрдЯрд░ рдХрд░реЗрдВ',
      createToolDesc: 'AI рдХреЗ рдЙрдкрдпреЛрдЧ рдХреЗ рд▓рд┐рдП рдХрд╕реНрдЯрдо рдЯреВрд▓ рдмрдирд╛рдПрдВ',
      getConfigDesc: 'рд╡рд░реНрддрдорд╛рди рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рди рд╕реЗрдЯрд┐рдВрдЧреНрд╕ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ',
      setConfigDesc: 'рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рди рдорд╛рди рд╕реЗрдЯ рдХрд░реЗрдВ',
      listToolsDesc: 'рд╕рднреА рдЙрдкрд▓рдмреНрдз рдЯреВрд▓реНрд╕ рдХреА рд╕реВрдЪреА рдмрдирд╛рдПрдВ',
      executeToolDesc: 'рдирд┐рд░реНрджрд┐рд╖реНрдЯ рдЯреВрд▓ рдирд┐рд╖реНрдкрд╛рджрд┐рдд рдХрд░реЗрдВ',
      
      askExample: '"рдорд╢реАрди рд▓рд░реНрдирд┐рдВрдЧ рдХреНрдпрд╛ рд╣реИ?"',
      analyzeExample: "'src/main.js'",
      pluginComment: '// рдкреНрд▓рдЧрдЗрди рд▓реЙрдЬрд┐рдХ рдпрд╣рд╛рдБ',
      pluginReturn: "'рдкреНрд▓рдЧрдЗрди рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдирд┐рд╖реНрдкрд╛рджрд┐рдд'",
      weatherDesc: "'рдирд┐рд░реНрджрд┐рд╖реНрдЯ рд╕реНрдерд╛рди рдХреЗ рд▓рд┐рдП рд╡рд░реНрддрдорд╛рди рдореМрд╕рдо рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ'",
      weatherComment: '// рдореМрд╕рдо рдбреЗрдЯрд╛ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ',
      weatherReturn: '`${location}рдореЗрдВ рдореМрд╕рдо: рдзреВрдк, 25┬░C`',
      configComment1: '// рд╕рднреА рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рди рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ',
      configComment2: '// рд╡рд┐рд╢рд┐рд╖реНрдЯ рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рди рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ',
      toolsComment: "'рдЙрдкрд▓рдмреНрдз рдЯреВрд▓реНрд╕:'"
    },
    fr: {
      coreApi: 'API Principale',
      coreApiDesc: 'API principale pour interagir avec les mod├иles Gemini et g├йrer les conversations',
      pluginApi: 'API Plugin',
      pluginApiDesc: 'API pour d├йvelopper des plugins et extensions personnalis├йs',
      configApi: 'API de Configuration',
      configApiDesc: 'API pour g├йrer la configuration et les param├иtres CLI',
      toolsApi: 'API des Outils',
      toolsApiDesc: 'API pour g├йrer et ex├йcuter les outils int├йgr├йs',
      
      chatDesc: 'D├йmarrer une session de chat interactive avec Gemini',
      askDesc: 'Envoyer une invite et recevoir une r├йponse',
      analyzeDesc: 'Analyser des fichiers ou du code avec l\'assistance IA',
      registerPluginDesc: 'Enregistrer un nouveau plugin avec le CLI',
      createToolDesc: 'Cr├йer un outil personnalis├й pour l\'IA',
      getConfigDesc: 'Obtenir les param├иtres de configuration actuels',
      setConfigDesc: 'D├йfinir une valeur de configuration',
      listToolsDesc: 'Lister tous les outils disponibles',
      executeToolDesc: 'Ex├йcuter l\'outil sp├йcifi├й',
      
      askExample: '"Qu\'est-ce que l\'apprentissage automatique ?"',
      analyzeExample: "'src/main.js'",
      pluginComment: '// Logique du plugin ici',
      pluginReturn: "'Plugin ex├йcut├й avec succ├иs'",
      weatherDesc: "'Obtenir la m├йt├йo actuelle pour un lieu'",
      weatherComment: '// R├йcup├йrer les donn├йes m├йt├йo',
      weatherReturn: '`M├йt├йo ├а ${location}: Ensoleill├й, 25┬░C`',
      configComment1: '// Obtenir toute la configuration',
      configComment2: '// Obtenir une configuration sp├йcifique',
      toolsComment: "'Outils disponibles:'"
    },
    de: {
      coreApi: 'Kern-API',
      coreApiDesc: 'Haupt-API f├╝r die Interaktion mit Gemini-Modellen und die Verwaltung von Gespr├дchen',
      pluginApi: 'Plugin-API',
      pluginApiDesc: 'API f├╝r die Entwicklung benutzerdefinierter Plugins und Erweiterungen',
      configApi: 'Konfigurations-API',
      configApiDesc: 'API zur Verwaltung von CLI-Konfiguration und -Einstellungen',
      toolsApi: 'Tools-API',
      toolsApiDesc: 'API zur Verwaltung und Ausf├╝hrung integrierter Tools',
      
      chatDesc: 'Interaktive Chat-Sitzung mit Gemini starten',
      askDesc: 'Eine Eingabeaufforderung senden und eine Antwort erhalten',
      analyzeDesc: 'Dateien oder Code mit KI-Unterst├╝tzung analysieren',
      registerPluginDesc: 'Neues Plugin mit der CLI registrieren',
      createToolDesc: 'Benutzerdefiniertes Tool f├╝r KI erstellen',
      getConfigDesc: 'Aktuelle Konfigurationseinstellungen abrufen',
      setConfigDesc: 'Konfigurationswert festlegen',
      listToolsDesc: 'Alle verf├╝gbaren Tools auflisten',
      executeToolDesc: 'Angegebenes Tool ausf├╝hren',
      
      askExample: '"Was ist maschinelles Lernen?"',
      analyzeExample: "'src/main.js'",
      pluginComment: '// Plugin-Logik hier',
      pluginReturn: "'Plugin erfolgreich ausgef├╝hrt'",
      weatherDesc: "'Aktuelles Wetter f├╝r einen Ort abrufen'",
      weatherComment: '// Wetterdaten abrufen',
      weatherReturn: '`Wetter in ${location}: Sonnig, 25┬░C`',
      configComment1: '// Alle Konfigurationen abrufen',
      configComment2: '// Spezifische Konfiguration abrufen',
      toolsComment: "'Verf├╝gbare Tools:'"
    }
  };
  
  // ф╕║цпПчзНшпншиАцЫ┤цЦ░APIщГихИЖ
  Object.keys(languages).forEach(lang => {
    const translations = languages[lang];
    
    // цЫ┤цЦ░analyzeцЦ╣ц│Х
    const analyzePattern = new RegExp(`(${lang}:[\\s\\S]*?name: 'ask\\(\\)',[\\s\\S]*?\\}\\s*)(\\]\\s*\\}\\s*,\\s*\\{\\s*id: 'plugin-api')`, 'g');
    content = content.replace(analyzePattern, (match, beforePlugin, afterAsk) => {
      return beforePlugin + `,
            {
              name: 'analyze()',
              description: '${translations.analyzeDesc}',
              signature: 'analyze(files: string[], options?: AnalyzeOptions): Promise<AnalysisResult>',
              example: \`const analysis = await cli.analyze([${translations.analyzeExample}], {
  type: 'code-review',
  includeMetrics: true
});\`
            }` + afterAsk;
    });
    
    // цЫ┤цЦ░цПТф╗╢APIцЦ╣ц│Х
    const pluginPattern = new RegExp(`(${lang}:[\\s\\S]*?id: 'plugin-api'[\\s\\S]*?methods: \\[[\\s\\S]*?name: 'registerPlugin\\(\\)',[\\s\\S]*?\\}\\s*)(\\]\\s*\\}\\s*(?:,\\s*\\{\\s*id: 'config-api'|\\]\\s*\\}\\s*,\\s*commonTypes))`, 'g');
    content = content.replace(pluginPattern, (match, beforeEnd, afterPlugin) => {
      return beforeEnd + `,
            {
              name: 'createTool()',
              description: '${translations.createToolDesc}',
              signature: 'createTool(definition: ToolDefinition): Tool',
              example: \`const weatherTool = cli.createTool({
  name: 'get_weather',
  description: ${translations.weatherDesc},
  parameters: {
    location: { type: 'string', required: true }
  },
  execute: async ({ location }) => {
    ${translations.weatherComment}
    return ${translations.weatherReturn};
  }
});\`
            }` + afterPlugin;
    });
  });
  
  // хЖЩхЫЮцЦЗф╗╢
  fs.writeFileSync(filePath, content, 'utf8');
  
  console.log('тЬЕ цИРхКЯцЫ┤цЦ░ф║ЖцЙАцЬЙшпншиАчЪДхоМцХ┤APIч┐╗шпС');
  
  return true;
}

// цЙзшбМцЫ┤цЦ░
if (require.main === module) {
  try {
    updateAPIReferenceComplete();
    console.log('\nЁЯОЙ APIхПВшАГщб╡щЭвхоМцХ┤ч┐╗шпСцЫ┤цЦ░хоМцИРя╝Б');
  } catch (error) {
    console.error('тЭМ цЫ┤цЦ░ш┐ЗчиЛф╕нхПСчФЯщФЩшпп:', error);
  }
}

module.exports = { updateAPIReferenceComplete };
