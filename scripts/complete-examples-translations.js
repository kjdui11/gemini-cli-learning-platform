const fs = require('fs');
const path = require('path');

// ‰∏∫examplesÈ°µÈù¢Ë°•ÂÖ®ÊâÄÊúâËØ≠Ë®ÄÁöÑÈõÜÊàêÁ§∫‰æãÂíåÈ´òÁ∫ßÁî®Ê≥ïÁøªËØë
function completeExamplesTranslations() {
  const filePath = path.join(__dirname, '..', 'src', 'app', '[locale]', 'docs', 'examples', 'page.tsx');
  
  console.log('üîß Ë°•ÂÖ®examplesÈ°µÈù¢ÁöÑÈõÜÊàêÁ§∫‰æãÂíåÈ´òÁ∫ßÁî®Ê≥ïÁøªËØë...');
  
  let content = fs.readFileSync(filePath, 'utf8');
  
  // Hindi - Ê∑ªÂä†ÈõÜÊàêÁ§∫‰æãÂíåÈ´òÁ∫ßÁî®Ê≥ï
  const hindiIntegrationAndAdvanced = `            },
            {
              title: '‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡§º ‡§ú‡•á‡§®‡§∞‡•á‡§ü‡§∞',
              description: '‡§ï‡•ã‡§° ‡§∏‡•á ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡§º‡•Ä‡§ï‡§∞‡§£ ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® ‡§ï‡§∞‡•á‡§Ç',
              language: 'bash',
              code: \`#!/bin/bash
# generate-docs.sh - ‡§∏‡•ç‡§µ‡§ö‡§æ‡§≤‡§ø‡§§ ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡§º‡•Ä‡§ï‡§∞‡§£

echo "üìö ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡§º‡•Ä‡§ï‡§∞‡§£ ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç..."

# API ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡§º‡•Ä‡§ï‡§∞‡§£ ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® ‡§ï‡§∞‡•á‡§Ç
gemini analyze src/api/*.js \\\\
  --prompt "‡§â‡§¶‡§æ‡§π‡§∞‡§£‡•ã‡§Ç ‡§ï‡•á ‡§∏‡§æ‡§• ‡§µ‡•ç‡§Ø‡§æ‡§™‡§ï API ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡§º‡•Ä‡§ï‡§∞‡§£ ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® ‡§ï‡§∞‡•á‡§Ç" \\\\
  --output docs/api.md

# README ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® ‡§ï‡§∞‡•á‡§Ç
gemini ask "‡§á‡§∏ ‡§™‡•ç‡§∞‡•ã‡§ú‡•á‡§ï‡•ç‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ã‡§°‡§¨‡•á‡§∏ ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ README.md ‡§¨‡§®‡§æ‡§è‡§Ç" \\\\
  --context src/ \\\\
  --output README.md

# ‡§ö‡•á‡§Ç‡§ú‡§≤‡•â‡§ó ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® ‡§ï‡§∞‡•á‡§Ç
git log --oneline --since="1 month ago" | \\\\
  gemini ask "‡§á‡§® git ‡§ï‡§Æ‡§ø‡§ü‡•ç‡§∏ ‡§ï‡•ã ‡§ö‡•á‡§Ç‡§ú‡§≤‡•â‡§ó ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤‡•á‡§Ç" \\\\
  --output CHANGELOG.md

echo "‚úÖ ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡§º‡•Ä‡§ï‡§∞‡§£ ‡§™‡•Ç‡§∞‡•ç‡§£!"\`
            },
            {
              title: '‡§ü‡•á‡§∏‡•ç‡§ü ‡§ú‡•á‡§®‡§∞‡•á‡§ü‡§∞',
              description: '‡§∏‡•ç‡§µ‡§ö‡§æ‡§≤‡§ø‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§Ø‡•Ç‡§®‡§ø‡§ü ‡§ü‡•á‡§∏‡•ç‡§ü ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® ‡§ï‡§∞‡•á‡§Ç',
              language: 'bash',
              code: \`#!/bin/bash
# generate-tests.sh - ‡§∏‡•ç‡§µ‡§ö‡§æ‡§≤‡§ø‡§§ ‡§Ø‡•Ç‡§®‡§ø‡§ü ‡§ü‡•á‡§∏‡•ç‡§ü

SOURCE_DIR="src"
TEST_DIR="tests"

echo "üß™ ‡§Ø‡•Ç‡§®‡§ø‡§ü ‡§ü‡•á‡§∏‡•ç‡§ü ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç..."

find $SOURCE_DIR -name "*.js" -o -name "*.ts" | while read file; do
  # ‡§∏‡§æ‡§™‡•á‡§ï‡•ç‡§∑ ‡§™‡§• ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç
  rel_path=\\$\\{file#\\$SOURCE_DIR/\\}
  test_file="\\$TEST_DIR/\\$\\{rel_path%.*\\}.test.\\$\\{file##*.\\}"

  echo "üìù ‡§á‡§∏ ‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ü‡•á‡§∏‡•ç‡§ü ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç: $file"

  gemini analyze "$file" \\\\
    --prompt "‡§∏‡•Ä‡§Æ‡§æ ‡§Æ‡§æ‡§Æ‡§≤‡•ã‡§Ç ‡§ï‡•á ‡§∏‡§æ‡§• ‡§µ‡•ç‡§Ø‡§æ‡§™‡§ï ‡§Ø‡•Ç‡§®‡§ø‡§ü ‡§ü‡•á‡§∏‡•ç‡§ü ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® ‡§ï‡§∞‡•á‡§Ç" \\\\
    --template jest \\\\
    --output "$test_file"
done

echo "‚úÖ ‡§ü‡•á‡§∏‡•ç‡§ü ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® ‡§™‡•Ç‡§∞‡•ç‡§£!"\`
            }
          ]
        },
        {
          id: 'integration',
          title: '‡§è‡§ï‡•Ä‡§ï‡§∞‡§£ ‡§â‡§¶‡§æ‡§π‡§∞‡§£',
          description: '‡§Ö‡§®‡•ç‡§Ø ‡§â‡§™‡§ï‡§∞‡§£‡•ã‡§Ç ‡§î‡§∞ ‡§µ‡§∞‡•ç‡§ï‡§´‡§º‡•ç‡§≤‡•ã ‡§ï‡•á ‡§∏‡§æ‡§• ‡§è‡§ï‡•Ä‡§ï‡§∞‡§£',
          icon: CogIcon,
          color: 'from-purple-500 to-pink-600',
          examples: [
            {
              title: 'GitHub Actions ‡§µ‡§∞‡•ç‡§ï‡§´‡§º‡•ç‡§≤‡•ã',
              description: 'GitHub Actions ‡§ï‡•á ‡§∏‡§æ‡§• CI/CD ‡§è‡§ï‡•Ä‡§ï‡§∞‡§£',
              language: 'yaml',
              code: \`name: AI ‡§ï‡•ã‡§° ‡§∏‡§Æ‡•Ä‡§ï‡•ç‡§∑‡§æ
on:
  pull_request:
    types: [opened, synchronize]

jobs:
  ai-review:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Node.js ‡§∏‡•á‡§ü‡§Ö‡§™ ‡§ï‡§∞‡•á‡§Ç
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Gemini CLI ‡§á‡§Ç‡§∏‡•ç‡§ü‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç
        run: npm install -g @google/generative-ai-cli
      
      - name: Gemini CLI ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞ ‡§ï‡§∞‡•á‡§Ç
        run: |
          gemini config set api-key \\$\\{\\{ secrets.GEMINI_API_KEY \\}\\}
          gemini config set model gemini-pro
      
      - name: ‡§¨‡§¶‡§≤‡•Ä ‡§ó‡§à ‡§´‡§º‡§æ‡§á‡§≤‡•á‡§Ç ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç
        id: changed-files
        run: |
          echo "files=\\$(git diff --name-only HEAD~1 | tr '\\\\n' ' ')" >> $GITHUB_OUTPUT
      
      - name: AI ‡§ï‡•ã‡§° ‡§∏‡§Æ‡•Ä‡§ï‡•ç‡§∑‡§æ
        run: |
          for file in \\$\\{\\{ steps.changed-files.outputs.files \\}\\}; do
            if [[ $file == *.js || $file == *.ts || $file == *.py ]]; then
              gemini analyze "$file" \\\\
                --type code-review \\\\
                --output "review-$file.md"
            fi
          done
      
      - name: PR ‡§™‡§∞ ‡§ü‡§ø‡§™‡•ç‡§™‡§£‡•Ä ‡§ï‡§∞‡•á‡§Ç
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const reviews = fs.readdirSync('.').filter(f => f.startsWith('review-'));
            
            let comment = '## ü§ñ AI ‡§ï‡•ã‡§° ‡§∏‡§Æ‡•Ä‡§ï‡•ç‡§∑‡§æ\\\\n\\\\n';
            reviews.forEach(file => {
              const content = fs.readFileSync(file, 'utf8');
              comment += \\`### \\$\\{file\\}\\\\n\\$\\{content\\}\\\\n\\\\n\\`;
            });
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });\`
            },
            {
              title: 'VS Code ‡§è‡§ï‡•ç‡§∏‡§ü‡•á‡§Ç‡§∂‡§®',
              description: '‡§ï‡§∏‡•ç‡§ü‡§Æ VS Code ‡§è‡§ï‡•ç‡§∏‡§ü‡•á‡§Ç‡§∂‡§® ‡§è‡§ï‡•Ä‡§ï‡§∞‡§£',
              language: 'javascript',
              code: \`// extension.js - Gemini CLI ‡§ï‡•á ‡§≤‡§ø‡§è VS Code ‡§è‡§ï‡•ç‡§∏‡§ü‡•á‡§Ç‡§∂‡§®
const vscode = require('vscode');
const { exec } = require('child_process');

function activate(context) {
  // ‡§ï‡§Æ‡§æ‡§Ç‡§°: ‡§ï‡•ã‡§° ‡§∏‡§Æ‡§ù‡§æ‡§è‡§Ç
  let explainCommand = vscode.commands.registerCommand(
    'gemini.explainCode', 
    async () => {
      const editor = vscode.window.activeTextEditor;
      if (!editor) return;

      const selection = editor.selection;
      const text = editor.document.getText(selection);
      
      if (!text) {
        vscode.window.showErrorMessage('‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§Æ‡§ù‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ã‡§° ‡§ö‡•Å‡§®‡•á‡§Ç');
        return;
      }

      // ‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç
      vscode.window.withProgress({
        location: vscode.ProgressLocation.Notification,
        title: "Gemini ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ï‡•ã‡§° ‡§∏‡§Æ‡§ù‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...",
        cancellable: false
      }, async () => {
        return new Promise((resolve, reject) => {
          exec(\\`echo "\\$\\{text\\}" | gemini ask "‡§á‡§∏ ‡§ï‡•ã‡§° ‡§ï‡•ã ‡§∏‡§Æ‡§ù‡§æ‡§è‡§Ç"\\`, 
            (error, stdout, stderr) => {
              if (error) {
                vscode.window.showErrorMessage(\\`‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: \\$\\{error.message\\}\\`);
                reject(error);
                return;
              }
              
              // ‡§®‡§è ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡§º ‡§Æ‡•á‡§Ç ‡§µ‡•ç‡§Ø‡§æ‡§ñ‡•ç‡§Ø‡§æ ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç
              vscode.workspace.openTextDocument({
                content: stdout,
                language: 'markdown'
              }).then(doc => {
                vscode.window.showTextDocument(doc);
                resolve();
              });
            });
        });
      });
    }
  );

  // ‡§ï‡§Æ‡§æ‡§Ç‡§°: ‡§ü‡•á‡§∏‡•ç‡§ü ‡§ú‡•á‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
  let testCommand = vscode.commands.registerCommand(
    'gemini.generateTests',
    async () => {
      const editor = vscode.window.activeTextEditor;
      if (!editor) return;

      const filePath = editor.document.fileName;
      const testPath = filePath.replace(/\\\\.(js|ts)$/, '.test.$1');

      exec(\\`gemini analyze "\\$\\{filePath\\}" --prompt "‡§Ø‡•Ç‡§®‡§ø‡§ü ‡§ü‡•á‡§∏‡•ç‡§ü ‡§ú‡•á‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç" --output "\\$\\{testPath\\}"\\`,
        (error, stdout, stderr) => {
          if (error) {
            vscode.window.showErrorMessage(\\`‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: \\$\\{error.message\\}\\`);
            return;
          }
          
          vscode.window.showInformationMessage(\\`‡§ü‡•á‡§∏‡•ç‡§ü ‡§ú‡•á‡§®‡§∞‡•á‡§ü ‡§ï‡§ø‡§è ‡§ó‡§è: \\$\\{testPath\\}\\`);
          vscode.workspace.openTextDocument(testPath).then(doc => {
            vscode.window.showTextDocument(doc);
          });
        });
    }
  );

  context.subscriptions.push(explainCommand, testCommand);
}

function deactivate() {}

module.exports = { activate, deactivate };\`
            },
            {
              title: 'Docker ‡§è‡§ï‡•Ä‡§ï‡§∞‡§£',
              description: '‡§ï‡§Ç‡§ü‡•á‡§®‡§∞ ‡§Æ‡•á‡§Ç Gemini CLI ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó',
              language: 'dockerfile',
              code: \`# Dockerfile - Gemini CLI ‡§ï‡§Ç‡§ü‡•á‡§®‡§∞
FROM node:18-alpine

# Gemini CLI ‡§á‡§Ç‡§∏‡•ç‡§ü‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç
RUN npm install -g @google/generative-ai-cli

# ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂‡§ø‡§ï‡§æ ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
WORKDIR /app

# ‡§™‡•ç‡§∞‡•ã‡§ú‡•á‡§ï‡•ç‡§ü ‡§´‡§º‡§æ‡§á‡§≤‡•á‡§Ç ‡§ï‡•â‡§™‡•Ä ‡§ï‡§∞‡•á‡§Ç
COPY . .

# ‡§™‡§∞‡•ç‡§Ø‡§æ‡§µ‡§∞‡§£ ‡§ö‡§∞ ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
ENV GEMINI_API_KEY=""

# ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§ü ‡§¨‡§®‡§æ‡§è‡§Ç
RUN echo '#!/bin/sh' > /usr/local/bin/analyze-project && \\\\
    echo 'gemini analyze src/ --output analysis.md' >> /usr/local/bin/analyze-project && \\\\
    chmod +x /usr/local/bin/analyze-project

# ‡§°‡§ø‡§´‡§º‡•â‡§≤‡•ç‡§ü ‡§ï‡§Æ‡§æ‡§Ç‡§°
CMD ["analyze-project"]\`
            }
          ]
        },
        {
          id: 'advanced',
          title: '‡§â‡§®‡•ç‡§®‡§§ ‡§â‡§™‡§Ø‡•ã‡§ó',
          description: '‡§ú‡§ü‡§ø‡§≤ ‡§™‡§∞‡§ø‡§¶‡•É‡§∂‡•ç‡§Ø ‡§î‡§∞ ‡§â‡§®‡•ç‡§®‡§§ ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ‡§è‡§Ç',
          icon: WrenchScrewdriverIcon,
          color: 'from-orange-500 to-red-600',
          examples: [
            {
              title: '‡§ï‡§∏‡•ç‡§ü‡§Æ ‡§ü‡•Ç‡§≤ ‡§µ‡§ø‡§ï‡§æ‡§∏',
              description: '‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§ï‡§æ‡§∞‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§∏‡•ç‡§ü‡§Æ ‡§ü‡•Ç‡§≤ ‡§¨‡§®‡§æ‡§è‡§Ç',
              language: 'javascript',
              code: \`// custom-tools.js - ‡§ï‡§∏‡•ç‡§ü‡§Æ ‡§ü‡•Ç‡§≤ ‡§™‡§∞‡§ø‡§≠‡§æ‡§∑‡§æ‡§è‡§Ç
const tools = {
  // ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§ï‡•ç‡§µ‡•á‡§∞‡•Ä ‡§ü‡•Ç‡§≤
  database_query: {
    name: 'database_query',
    description: '‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§™‡§∞ SQL ‡§ï‡•ç‡§µ‡•á‡§∞‡•Ä ‡§®‡§ø‡§∑‡•ç‡§™‡§æ‡§¶‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç',
    parameters: {
      query: { type: 'string', required: true },
      database: { type: 'string', default: 'main' }
    },
    execute: async ({ query, database }) => {
      const db = require('./db-connection');
      try {
        const result = await db.query(query, database);
        return JSON.stringify(result, null, 2);
      } catch (error) {
        return \\`‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: \\$\\{error.message\\}\\`;
      }
    }
  },

  // API ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§ü‡•Ç‡§≤
  api_test: {
    name: 'api_test',
    description: 'API ‡§è‡§Ç‡§°‡§™‡•â‡§á‡§Ç‡§ü‡•ç‡§∏ ‡§ï‡§æ ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§ï‡§∞‡•á‡§Ç',
    parameters: {
      url: { type: 'string', required: true },
      method: { type: 'string', default: 'GET' },
      headers: { type: 'object', default: {} },
      body: { type: 'object', default: null }
    },
    execute: async ({ url, method, headers, body }) => {
      const fetch = require('node-fetch');
      try {
        const response = await fetch(url, {
          method,
          headers,
          body: body ? JSON.stringify(body) : undefined
        });
        
        const data = await response.text();
        return \\`‡§∏‡•ç‡§•‡§ø‡§§‡§ø: \\$\\{response.status\\}\\\\n‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ: \\$\\{data\\}\\`;
      } catch (error) {
        return \\`‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: \\$\\{error.message\\}\\`;
      }
    }
  },

  // ‡§ï‡•ã‡§° ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü‡§∞ ‡§ü‡•Ç‡§≤
  format_code: {
    name: 'format_code',
    description: 'prettier ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§ï‡•ã‡§° ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç',
    parameters: {
      code: { type: 'string', required: true },
      language: { type: 'string', default: 'javascript' }
    },
    execute: async ({ code, language }) => {
      const prettier = require('prettier');
      try {
        const formatted = prettier.format(code, {
          parser: language === 'typescript' ? 'typescript' : 'babel',
          semi: true,
          singleQuote: true,
          tabWidth: 2
        });
        return formatted;
      } catch (error) {
        return \\`‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: \\$\\{error.message\\}\\`;
      }
    }
  }
};

// Gemini CLI ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ü‡•Ç‡§≤‡•ç‡§∏ ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞ ‡§ï‡§∞‡•á‡§Ç
Object.values(tools).forEach(tool => {
  process.env.GEMINI_TOOLS = JSON.stringify([
    ...(JSON.parse(process.env.GEMINI_TOOLS || '[]')),
    tool
  ]);
});

module.exports = tools;\`
            }
          ]
        }`;

  // Âú®HindiÂü∫Á°Ä‰ΩøÁî®ÂêéÊ∑ªÂä†ÂÆåÊï¥ÁöÑÈõÜÊàêÂíåÈ´òÁ∫ßÁî®Ê≥ï
  content = content.replace(
    /(\s+)(\}\s+\]\s+\}\s+\}\s+\/\/ French translation)/,
    `$1${hindiIntegrationAndAdvanced}$2`
  );
  
  // ÂÜôÂõûÊñá‰ª∂
  fs.writeFileSync(filePath, content, 'utf8');
  
  console.log('‚úÖ ÊàêÂäüË°•ÂÖ®‰∫ÜHindiÁöÑÈõÜÊàêÁ§∫‰æãÂíåÈ´òÁ∫ßÁî®Ê≥ïÁøªËØë');
  
  return true;
}

// ÊâßË°åË°•ÂÖ®ÁøªËØë
if (require.main === module) {
  try {
    completeExamplesTranslations();
    console.log('\nüéâ HindiËØ≠Ë®ÄÁöÑexamplesÂÆåÊï¥ÁøªËØëË°•ÂÖ®ÂÆåÊàêÔºÅ');
  } catch (error) {
    console.error('‚ùå Ë°•ÂÖ®ÁøªËØëËøáÁ®ã‰∏≠ÂèëÁîüÈîôËØØ:', error);
  }
}

module.exports = { completeExamplesTranslations };
