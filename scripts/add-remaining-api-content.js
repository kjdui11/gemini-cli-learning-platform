const fs = require('fs');
const path = require('path');

// ‰∏∫Ââ©‰ΩôËØ≠Ë®ÄÊ∑ªÂä†È¢ùÂ§ñÁöÑAPIÂÜÖÂÆπ
function addRemainingAPIContent() {
  const filePath = path.join(__dirname, '..', 'src', 'app', '[locale]', 'docs', 'api-reference', 'page.tsx');
  
  console.log('üîß ‰∏∫Ââ©‰ΩôËØ≠Ë®ÄÊ∑ªÂä†È¢ùÂ§ñÁöÑAPIÂÜÖÂÆπ...');
  
  let content = fs.readFileSync(filePath, 'utf8');
  
  // Èü©ËØ≠È¢ùÂ§ñÂÜÖÂÆπ
  const koreanAddition = `,
      // Configuration API
      configApiSectionTitle: 'Íµ¨ÏÑ± API',
      configApiSectionDesc: 'CLI Íµ¨ÏÑ± Î∞è ÏÑ§Ï†ï Í¥ÄÎ¶¨Î•º ÏúÑÌïú API',
      getConfigTitle: 'getConfig()',
      getConfigDesc: 'ÌòÑÏû¨ Íµ¨ÏÑ± Í∞í Í∞ÄÏ†∏Ïò§Í∏∞',
      getConfigSignature: 'getConfig(key?: string): any',
      getConfigExample: \`// Î™®Îì† Íµ¨ÏÑ± Í∞ÄÏ†∏Ïò§Í∏∞
const config = cli.getConfig();

// ÌäπÏ†ï Íµ¨ÏÑ± Í∞í Í∞ÄÏ†∏Ïò§Í∏∞
const model = cli.getConfig('model');\`,
      setConfigTitle: 'setConfig()',
      setConfigDesc: 'Íµ¨ÏÑ± Í∞í ÏÑ§Ï†ï',
      setConfigSignature: 'setConfig(key: string, value: any): void',
      setConfigExample: \`// Î™®Îç∏ ÏÑ§Ï†ï
cli.setConfig('model', 'gemini-pro');

// Ïó¨Îü¨ Í∞í ÏÑ§Ï†ï
cli.setConfig('temperature', 0.8);
cli.setConfig('maxTokens', 2000);\`,
      resetConfigTitle: 'resetConfig()',
      resetConfigDesc: 'Íµ¨ÏÑ±ÏùÑ Í∏∞Î≥∏Í∞íÏúºÎ°ú Ïû¨ÏÑ§Ï†ï',
      resetConfigSignature: 'resetConfig(key?: string): void',
      resetConfigExample: \`// Î™®Îì† Íµ¨ÏÑ± Ïû¨ÏÑ§Ï†ï
cli.resetConfig();

// ÌäπÏ†ï ÌÇ§ Ïû¨ÏÑ§Ï†ï
cli.resetConfig('temperature');\`,
      // Tools API
      toolsApiSectionTitle: 'ÎèÑÍµ¨ API',
      toolsApiSectionDesc: 'ÎÇ¥Ïû• ÎèÑÍµ¨ Í¥ÄÎ¶¨ Î∞è Ïã§ÌñâÏùÑ ÏúÑÌïú API',
      listToolsTitle: 'listTools()',
      listToolsDesc: 'ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÎèÑÍµ¨ Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞',
      listToolsSignature: 'listTools(): Tool[]',
      listToolsExample: \`const tools = cli.listTools();
console.log(tools.map(t => t.name));
// ['read_file', 'write_file', 'run_shell_command', ...]\`,
      executeToolTitle: 'executeTool()',
      executeToolDesc: 'ÌäπÏ†ï ÎèÑÍµ¨ Ïã§Ìñâ',
      executeToolSignature: 'executeTool(name: string, args: any): Promise<any>',
      executeToolExample: \`// ÌååÏùº ÏùΩÍ∏∞
const content = await cli.executeTool('read_file', {
  path: './package.json'
});

// ÏÖ∏ Î™ÖÎ†π Ïã§Ìñâ
const result = await cli.executeTool('run_shell_command', {
  command: 'ls -la'
});\`,
      // Common Types
      commonTypesTitle: 'Í≥µÌÜµ ÌÉÄÏûÖ',
      commonTypesDesc: 'APIÏóêÏÑú ÏÇ¨Ïö©ÎêòÎäî TypeScript Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ Î∞è ÌÉÄÏûÖ',
      chatOptionsTitle: 'ChatOptions',
      chatOptionsDesc: 'Ï±ÑÌåÖ ÏÑ∏ÏÖò ÏãúÏûëÏùÑ ÏúÑÌïú ÏòµÏÖò',
      modelField: 'model',
      modelDesc: 'ÏÇ¨Ïö©Ìï† Î™®Îç∏ (Ïòà: "gemini-pro")',
      temperatureField: 'temperature',
      temperatureDesc: 'Ï∞ΩÏùòÏÑ± ÏàòÏ§Ä (0-1)',
      maxTokensField: 'maxTokens',
      maxTokensDesc: 'ÏµúÎåÄ ÏùëÎãµ Í∏∏Ïù¥',
      systemPromptField: 'systemPrompt',
      systemPromptDesc: 'ÏãúÏä§ÌÖú ÏßÄÏãúÏÇ¨Ìï≠',
      toolDefinitionTitle: 'ToolDefinition',
      toolDefinitionDesc: 'ÏÇ¨Ïö©Ïûê Ï†ïÏùò ÎèÑÍµ¨ ÏÉùÏÑ±ÏùÑ ÏúÑÌïú Ï†ïÏùò',
      nameField: 'name',
      nameDesc: 'Í≥†Ïú†Ìïú ÎèÑÍµ¨ Ïù¥Î¶Ñ',
      descriptionField: 'description',
      descriptionDesc: 'AIÎ•º ÏúÑÌïú ÎèÑÍµ¨ ÏÑ§Î™Ö',
      parametersField: 'parameters',
      parametersDesc: 'Îß§Í∞úÎ≥ÄÏàò Ïä§ÌÇ§Îßà',
      executeField: 'execute',
      executeDesc: 'ÎèÑÍµ¨ Ïã§Ìñâ Ìï®Ïàò',
      // Additional Resources
      additionalResourcesTitle: 'Ï∂îÍ∞Ä Î¶¨ÏÜåÏä§',
      additionalResourcesDesc: 'Îçî ÎßéÏùÄ Î¨∏ÏÑúÏôÄ ÏòàÏ†ú ÌÉêÏÉâ',
      viewExamplesText: 'ÏòàÏ†ú Î≥¥Í∏∞',
      backToDocsText: 'Î¨∏ÏÑúÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞'`;

  // Ë•øÁè≠ÁâôËØ≠È¢ùÂ§ñÂÜÖÂÆπ
  const spanishAddition = `,
      // Configuration API
      configApiSectionTitle: 'API de Configuraci√≥n',
      configApiSectionDesc: 'API para gestionar configuraci√≥n y ajustes del CLI',
      getConfigTitle: 'getConfig()',
      getConfigDesc: 'Obtener valores de configuraci√≥n actuales',
      getConfigSignature: 'getConfig(key?: string): any',
      getConfigExample: \`// Obtener toda la configuraci√≥n
const config = cli.getConfig();

// Obtener valor de configuraci√≥n espec√≠fico
const model = cli.getConfig('model');\`,
      setConfigTitle: 'setConfig()',
      setConfigDesc: 'Establecer valores de configuraci√≥n',
      setConfigSignature: 'setConfig(key: string, value: any): void',
      setConfigExample: \`// Establecer modelo
cli.setConfig('model', 'gemini-pro');

// Establecer m√∫ltiples valores
cli.setConfig('temperature', 0.8);
cli.setConfig('maxTokens', 2000);\`,
      resetConfigTitle: 'resetConfig()',
      resetConfigDesc: 'Restablecer configuraci√≥n a valores predeterminados',
      resetConfigSignature: 'resetConfig(key?: string): void',
      resetConfigExample: \`// Restablecer toda la configuraci√≥n
cli.resetConfig();

// Restablecer clave espec√≠fica
cli.resetConfig('temperature');\`,
      // Tools API
      toolsApiSectionTitle: 'API de Herramientas',
      toolsApiSectionDesc: 'API para gestionar y ejecutar herramientas integradas',
      listToolsTitle: 'listTools()',
      listToolsDesc: 'Obtener lista de herramientas disponibles',
      listToolsSignature: 'listTools(): Tool[]',
      listToolsExample: \`const tools = cli.listTools();
console.log(tools.map(t => t.name));
// ['read_file', 'write_file', 'run_shell_command', ...]\`,
      executeToolTitle: 'executeTool()',
      executeToolDesc: 'Ejecutar herramienta espec√≠fica',
      executeToolSignature: 'executeTool(name: string, args: any): Promise<any>',
      executeToolExample: \`// Leer archivo
const content = await cli.executeTool('read_file', {
  path: './package.json'
});

// Ejecutar comando shell
const result = await cli.executeTool('run_shell_command', {
  command: 'ls -la'
});\`,
      // Common Types
      commonTypesTitle: 'Tipos Comunes',
      commonTypesDesc: 'Interfaces y tipos TypeScript utilizados en la API',
      chatOptionsTitle: 'ChatOptions',
      chatOptionsDesc: 'Opciones para iniciar sesi√≥n de chat',
      modelField: 'model',
      modelDesc: 'Modelo a usar (ej: "gemini-pro")',
      temperatureField: 'temperature',
      temperatureDesc: 'Nivel de creatividad (0-1)',
      maxTokensField: 'maxTokens',
      maxTokensDesc: 'Longitud m√°xima de respuesta',
      systemPromptField: 'systemPrompt',
      systemPromptDesc: 'Instrucciones del sistema',
      toolDefinitionTitle: 'ToolDefinition',
      toolDefinitionDesc: 'Definici√≥n para crear herramientas personalizadas',
      nameField: 'name',
      nameDesc: 'Nombre √∫nico de herramienta',
      descriptionField: 'description',
      descriptionDesc: 'Descripci√≥n de herramienta para IA',
      parametersField: 'parameters',
      parametersDesc: 'Esquema de par√°metros',
      executeField: 'execute',
      executeDesc: 'Funci√≥n de ejecuci√≥n de herramienta',
      // Additional Resources
      additionalResourcesTitle: 'Recursos Adicionales',
      additionalResourcesDesc: 'Explorar m√°s documentaci√≥n y ejemplos',
      viewExamplesText: 'Ver Ejemplos',
      backToDocsText: 'Volver a Docs'`;

  // ‰øÑËØ≠È¢ùÂ§ñÂÜÖÂÆπ
  const russianAddition = `,
      // Configuration API
      configApiSectionTitle: 'API –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
      configApiSectionDesc: 'API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ CLI',
      getConfigTitle: 'getConfig()',
      getConfigDesc: '–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
      getConfigSignature: 'getConfig(key?: string): any',
      getConfigExample: \`// –ü–æ–ª—É—á–∏—Ç—å –≤—Å—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
const config = cli.getConfig();

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const model = cli.getConfig('model');\`,
      setConfigTitle: 'setConfig()',
      setConfigDesc: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
      setConfigSignature: 'setConfig(key: string, value: any): void',
      setConfigExample: \`// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å
cli.setConfig('model', 'gemini-pro');

// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π
cli.setConfig('temperature', 0.8);
cli.setConfig('maxTokens', 2000);\`,
      resetConfigTitle: 'resetConfig()',
      resetConfigDesc: '–°–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
      resetConfigSignature: 'resetConfig(key?: string): void',
      resetConfigExample: \`// –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
cli.resetConfig();

// –°–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
cli.resetConfig('temperature');\`,
      // Tools API
      toolsApiSectionTitle: 'API –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤',
      toolsApiSectionDesc: 'API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤',
      listToolsTitle: 'listTools()',
      listToolsDesc: '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤',
      listToolsSignature: 'listTools(): Tool[]',
      listToolsExample: \`const tools = cli.listTools();
console.log(tools.map(t => t.name));
// ['read_file', 'write_file', 'run_shell_command', ...]\`,
      executeToolTitle: 'executeTool()',
      executeToolDesc: '–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç',
      executeToolSignature: 'executeTool(name: string, args: any): Promise<any>',
      executeToolExample: \`// –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª
const content = await cli.executeTool('read_file', {
  path: './package.json'
});

// –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É shell
const result = await cli.executeTool('run_shell_command', {
  command: 'ls -la'
});\`,
      // Common Types
      commonTypesTitle: '–û–±—â–∏–µ –¢–∏–ø—ã',
      commonTypesDesc: '–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏ —Ç–∏–ø—ã TypeScript, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ API',
      chatOptionsTitle: 'ChatOptions',
      chatOptionsDesc: '–û–ø—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞',
      modelField: 'model',
      modelDesc: '–ú–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: "gemini-pro")',
      temperatureField: 'temperature',
      temperatureDesc: '–£—Ä–æ–≤–µ–Ω—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ (0-1)',
      maxTokensField: 'maxTokens',
      maxTokensDesc: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞',
      systemPromptField: 'systemPrompt',
      systemPromptDesc: '–°–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',
      toolDefinitionTitle: 'ToolDefinition',
      toolDefinitionDesc: '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤',
      nameField: 'name',
      nameDesc: '–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞',
      descriptionField: 'description',
      descriptionDesc: '–û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è –ò–ò',
      parametersField: 'parameters',
      parametersDesc: '–°—Ö–µ–º–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤',
      executeField: 'execute',
      executeDesc: '–§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞',
      // Additional Resources
      additionalResourcesTitle: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –†–µ—Å—É—Ä—Å—ã',
      additionalResourcesDesc: '–ò–∑—É—á–∏—Ç—å –±–æ–ª—å—à–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –ø—Ä–∏–º–µ—Ä–æ–≤',
      viewExamplesText: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ü—Ä–∏–º–µ—Ä—ã',
      backToDocsText: '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏'`;

  // Ê∑ªÂä†Èü©ËØ≠ÂÜÖÂÆπ
  content = content.replace(
    "      signatureLabel: 'ÏãúÍ∑∏ÎãàÏ≤ò:',\n      exampleLabel: 'ÏòàÏ†ú:'\n    }",
    `      signatureLabel: 'ÏãúÍ∑∏ÎãàÏ≤ò:',\n      exampleLabel: 'ÏòàÏ†ú:'${koreanAddition}\n    }`
  );

  // Ê∑ªÂä†Ë•øÁè≠ÁâôËØ≠ÂÜÖÂÆπ
  content = content.replace(
    "      signatureLabel: 'Firma:',\n      exampleLabel: 'Ejemplo:'\n    }",
    `      signatureLabel: 'Firma:',\n      exampleLabel: 'Ejemplo:'${spanishAddition}\n    }`
  );

  // Ê∑ªÂä†‰øÑËØ≠ÂÜÖÂÆπ
  content = content.replace(
    "      signatureLabel: '–ü–æ–¥–ø–∏—Å—å:',\n      exampleLabel: '–ü—Ä–∏–º–µ—Ä:'\n    }",
    `      signatureLabel: '–ü–æ–¥–ø–∏—Å—å:',\n      exampleLabel: '–ü—Ä–∏–º–µ—Ä:'${russianAddition}\n    }`
  );

  // ÂÜôÂõûÊñá‰ª∂
  fs.writeFileSync(filePath, content, 'utf8');
  
  console.log('‚úÖ ÊàêÂäü‰∏∫Èü©ËØ≠„ÄÅË•øÁè≠ÁâôËØ≠Âíå‰øÑËØ≠Ê∑ªÂä†‰∫ÜÈ¢ùÂ§ñÁöÑAPIÂÜÖÂÆπ');
  
  return true;
}

// ÊâßË°åÊ∑ªÂä†ÂÜÖÂÆπ
if (require.main === module) {
  try {
    addRemainingAPIContent();
    console.log('\nüéâ Ââ©‰ΩôËØ≠Ë®ÄÁöÑÈ¢ùÂ§ñAPIÂÜÖÂÆπÊ∑ªÂä†ÂÆåÊàêÔºÅ');
  } catch (error) {
    console.error('‚ùå Ê∑ªÂä†ÂÜÖÂÆπËøáÁ®ã‰∏≠ÂèëÁîüÈîôËØØ:', error);
  }
}

module.exports = { addRemainingAPIContent };
