const fs = require('fs');
const path = require('path');

// Ê∑ªÂä†ÊúÄÂêéÁöÑAPIÂèÇËÄÉÁøªËØëÔºàË•øÁè≠ÁâôËØ≠Âíå‰øÑËØ≠Ôºâ
function addFinalAPITranslations() {
  const filePath = path.join(__dirname, '..', 'src', 'app', '[locale]', 'docs', 'api-reference', 'page.tsx');
  
  console.log('üîß Ê∑ªÂä†ÊúÄÂêéÁöÑAPIÂèÇËÄÉÁøªËØëÔºàË•øÁè≠ÁâôËØ≠Âíå‰øÑËØ≠Ôºâ...');
  
  let content = fs.readFileSync(filePath, 'utf8');
  
  // Ë•øÁè≠ÁâôËØ≠ÁøªËØë
  const spanishTranslation = `    },
    es: {
      title: 'Referencia API',
      subtitle: 'Documentaci√≥n completa de la API de Gemini CLI con descripciones detalladas de m√©todos, par√°metros y ejemplos pr√°cticos.',
      sectionsTitle: 'Secciones API',
      sectionsSubtitle: 'Navegar por diferentes categor√≠as de API',
      typesTitle: 'Tipos Comunes',
      typesSubtitle: 'Interfaces y tipos TypeScript utilizados en la API',
      resourcesTitle: 'Recursos Relacionados',
      resourcesSubtitle: 'Explorar m√°s documentaci√≥n y ejemplos',
      backToDocs: 'Volver a la Documentaci√≥n',
      apiSections: [
        {
          id: 'core-api',
          title: 'API Principal',
          description: 'API principal para interactuar con modelos Gemini y gestionar conversaciones',
          methods: [
            {
              name: 'chat()',
              description: 'Iniciar sesi√≥n de chat interactiva con Gemini',
              signature: 'chat(options?: ChatOptions): Promise<ChatSession>',
              example: \`import { GeminiCLI } from '@google/generative-ai-cli';

const cli = new GeminiCLI();
const session = await cli.chat({
  model: 'gemini-pro',
  temperature: 0.7
});\`
            },
            {
              name: 'ask()',
              description: 'Enviar un prompt y recibir respuesta',
              signature: 'ask(prompt: string, options?: AskOptions): Promise<string>',
              example: \`const response = await cli.ask("¬øQu√© es el aprendizaje autom√°tico?", {
  maxTokens: 1000,
  temperature: 0.5
});\`
            },
            {
              name: 'analyze()',
              description: 'Analizar archivos o c√≥digo con asistencia de IA',
              signature: 'analyze(files: string[], options?: AnalyzeOptions): Promise<AnalysisResult>',
              example: \`const analysis = await cli.analyze(['src/main.js'], {
  type: 'code-review',
  includeMetrics: true
});\`
            }
          ]
        },
        {
          id: 'plugin-api',
          title: 'API de Plugin',
          description: 'API para desarrollar plugins y extensiones personalizados',
          methods: [
            {
              name: 'registerPlugin()',
              description: 'Registrar nuevo plugin con el CLI',
              signature: 'registerPlugin(plugin: Plugin): void',
              example: \`const myPlugin = {
  name: 'my-custom-plugin',
  version: '1.0.0',
  commands: {
    'custom-command': async (args) => {
      // L√≥gica del plugin aqu√≠
      return 'Plugin ejecutado exitosamente';
    }
  }
};

cli.registerPlugin(myPlugin);\`
            },
            {
              name: 'createTool()',
              description: 'Crear herramienta personalizada para IA',
              signature: 'createTool(definition: ToolDefinition): Tool',
              example: \`const weatherTool = cli.createTool({
  name: 'get_weather',
  description: 'Obtener clima actual para una ubicaci√≥n',
  parameters: {
    location: { type: 'string', required: true }
  },
  execute: async ({ location }) => {
    // Obtener datos del clima
    return \\\`Clima en \\\${location}: Soleado, 25¬∞C\\\`;
  }
});\`
            }
          ]
        },
        {
          id: 'config-api',
          title: 'API de Configuraci√≥n',
          description: 'API para gestionar configuraci√≥n y ajustes del CLI',
          methods: [
            {
              name: 'getConfig()',
              description: 'Obtener configuraciones actuales',
              signature: 'getConfig(key?: string): any',
              example: \`// Obtener toda la configuraci√≥n
const config = cli.getConfig();

// Obtener configuraci√≥n espec√≠fica
const apiKey = cli.getConfig('apiKey');\`
            },
            {
              name: 'setConfig()',
              description: 'Establecer valor de configuraci√≥n',
              signature: 'setConfig(key: string, value: any): void',
              example: \`cli.setConfig('temperature', 0.8);
cli.setConfig('model', 'gemini-pro');\`
            }
          ]
        },
        {
          id: 'tools-api',
          title: 'API de Herramientas',
          description: 'API para gestionar y ejecutar herramientas integradas',
          methods: [
            {
              name: 'listTools()',
              description: 'Listar todas las herramientas disponibles',
              signature: 'listTools(): Tool[]',
              example: \`const tools = cli.listTools();
console.log('Herramientas disponibles:', tools.map(t => t.name));\`
            },
            {
              name: 'executeTool()',
              description: 'Ejecutar herramienta especificada',
              signature: 'executeTool(name: string, params: any): Promise<any>',
              example: \`const result = await cli.executeTool('file_reader', {
  path: './README.md'
});\`
            }
          ]
        }
      ],
      commonTypes: [
        {
          name: 'ChatOptions',
          description: 'Opciones de configuraci√≥n de sesi√≥n de chat',
          properties: [
            { name: 'model', type: 'string', description: 'El modelo Gemini a utilizar' },
            { name: 'temperature', type: 'number', description: 'Creatividad de la respuesta (0-1)' },
            { name: 'maxTokens', type: 'number', description: 'L√≠mite m√°ximo de tokens' }
          ]
        },
        {
          name: 'AskOptions',
          description: 'Opciones de configuraci√≥n para consulta √∫nica',
          properties: [
            { name: 'maxTokens', type: 'number', description: 'N√∫mero m√°ximo de tokens' },
            { name: 'temperature', type: 'number', description: 'Nivel de creatividad' },
            { name: 'stream', type: 'boolean', description: 'Si la respuesta es streaming' }
          ]
        },
        {
          name: 'AnalyzeOptions',
          description: 'Opciones de configuraci√≥n de an√°lisis de c√≥digo',
          properties: [
            { name: 'type', type: 'string', description: 'Tipo de an√°lisis (code-review, security, performance)' },
            { name: 'includeMetrics', type: 'boolean', description: 'Incluir m√©tricas de c√≥digo' },
            { name: 'language', type: 'string', description: 'Lenguaje de programaci√≥n' }
          ]
        }
      ],
      resources: [
        { title: 'Ejemplos de C√≥digo', description: 'Ejemplos pr√°cticos y plantillas', href: '/docs/examples' },
        { title: 'Tutoriales', description: 'Gu√≠as paso a paso y tutoriales', href: '/docs/tutorials' },
        { title: 'GitHub', description: 'C√≥digo fuente y contribuciones', href: 'https://github.com/google-gemini/gemini-cli', external: true }
      ]`;

  // ‰øÑËØ≠ÁøªËØë
  const russianTranslation = `    },
    ru: {
      title: '–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ API',
      subtitle: '–ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API Gemini CLI —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –º–µ—Ç–æ–¥–æ–≤, –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏.',
      sectionsTitle: '–†–∞–∑–¥–µ–ª—ã API',
      sectionsSubtitle: '–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º API',
      typesTitle: '–û–±—â–∏–µ –¢–∏–ø—ã',
      typesSubtitle: 'TypeScript –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏ —Ç–∏–ø—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ API',
      resourcesTitle: '–°–≤—è–∑–∞–Ω–Ω—ã–µ –†–µ—Å—É—Ä—Å—ã',
      resourcesSubtitle: '–ò–∑—É—á–∏—Ç–µ –±–æ–ª—å—à–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –ø—Ä–∏–º–µ—Ä–æ–≤',
      backToDocs: '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏',
      apiSections: [
        {
          id: 'core-api',
          title: '–û—Å–Ω–æ–≤–Ω–æ–π API',
          description: '–û—Å–Ω–æ–≤–Ω–æ–π API –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –º–æ–¥–µ–ª—è–º–∏ Gemini –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞–º–∏',
          methods: [
            {
              name: 'chat()',
              description: '–ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é —á–∞—Ç–∞ —Å Gemini',
              signature: 'chat(options?: ChatOptions): Promise<ChatSession>',
              example: \`import { GeminiCLI } from '@google/generative-ai-cli';

const cli = new GeminiCLI();
const session = await cli.chat({
  model: 'gemini-pro',
  temperature: 0.7
});\`
            },
            {
              name: 'ask()',
              description: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç',
              signature: 'ask(prompt: string, options?: AskOptions): Promise<string>',
              example: \`const response = await cli.ask("–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?", {
  maxTokens: 1000,
  temperature: 0.5
});\`
            },
            {
              name: 'analyze()',
              description: '–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –∏–ª–∏ –∫–æ–¥ —Å –ø–æ–º–æ—â—å—é –ò–ò',
              signature: 'analyze(files: string[], options?: AnalyzeOptions): Promise<AnalysisResult>',
              example: \`const analysis = await cli.analyze(['src/main.js'], {
  type: 'code-review',
  includeMetrics: true
});\`
            }
          ]
        },
        {
          id: 'plugin-api',
          title: 'API –ü–ª–∞–≥–∏–Ω–æ–≤',
          description: 'API –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–ª–∞–≥–∏–Ω–æ–≤ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π',
          methods: [
            {
              name: 'registerPlugin()',
              description: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–≥–∏–Ω —Å CLI',
              signature: 'registerPlugin(plugin: Plugin): void',
              example: \`const myPlugin = {
  name: 'my-custom-plugin',
  version: '1.0.0',
  commands: {
    'custom-command': async (args) => {
      // –õ–æ–≥–∏–∫–∞ –ø–ª–∞–≥–∏–Ω–∞ –∑–¥–µ—Å—å
      return '–ü–ª–∞–≥–∏–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ';
    }
  }
};

cli.registerPlugin(myPlugin);\`
            },
            {
              name: 'createTool()',
              description: '–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ò–ò',
              signature: 'createTool(definition: ToolDefinition): Tool',
              example: \`const weatherTool = cli.createTool({
  name: 'get_weather',
  description: '–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –¥–ª—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è',
  parameters: {
    location: { type: 'string', required: true }
  },
  execute: async ({ location }) => {
    // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
    return \\\`–ü–æ–≥–æ–¥–∞ –≤ \\\${location}: –°–æ–ª–Ω–µ—á–Ω–æ, 25¬∞C\\\`;
  }
});\`
            }
          ]
        },
        {
          id: 'config-api',
          title: 'API –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
          description: 'API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ CLI',
          methods: [
            {
              name: 'getConfig()',
              description: '–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
              signature: 'getConfig(key?: string): any',
              example: \`// –ü–æ–ª—É—á–∏—Ç—å –≤—Å—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
const config = cli.getConfig();

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
const apiKey = cli.getConfig('apiKey');\`
            },
            {
              name: 'setConfig()',
              description: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
              signature: 'setConfig(key: string, value: any): void',
              example: \`cli.setConfig('temperature', 0.8);
cli.setConfig('model', 'gemini-pro');\`
            }
          ]
        },
        {
          id: 'tools-api',
          title: 'API –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤',
          description: 'API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤',
          methods: [
            {
              name: 'listTools()',
              description: '–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã',
              signature: 'listTools(): Tool[]',
              example: \`const tools = cli.listTools();
console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:', tools.map(t => t.name));\`
            },
            {
              name: 'executeTool()',
              description: '–í—ã–ø–æ–ª–Ω–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç',
              signature: 'executeTool(name: string, params: any): Promise<any>',
              example: \`const result = await cli.executeTool('file_reader', {
  path: './README.md'
});\`
            }
          ]
        }
      ],
      commonTypes: [
        {
          name: 'ChatOptions',
          description: '–û–ø—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞',
          properties: [
            { name: 'model', type: 'string', description: '–ú–æ–¥–µ–ª—å Gemini –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è' },
            { name: 'temperature', type: 'number', description: '–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ (0-1)' },
            { name: 'maxTokens', type: 'number', description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤' }
          ]
        },
        {
          name: 'AskOptions',
          description: '–û–ø—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞',
          properties: [
            { name: 'maxTokens', type: 'number', description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤' },
            { name: 'temperature', type: 'number', description: '–£—Ä–æ–≤–µ–Ω—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏' },
            { name: 'stream', type: 'boolean', description: '–ü–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –Ω–µ—Ç' }
          ]
        },
        {
          name: 'AnalyzeOptions',
          description: '–û–ø—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞',
          properties: [
            { name: 'type', type: 'string', description: '–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞ (code-review, security, performance)' },
            { name: 'includeMetrics', type: 'boolean', description: '–í–∫–ª—é—á–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∫–æ–¥–∞' },
            { name: 'language', type: 'string', description: '–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è' }
          ]
        }
      ],
      resources: [
        { title: '–ü—Ä–∏–º–µ—Ä—ã –ö–æ–¥–∞', description: '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –∏ —à–∞–±–ª–æ–Ω—ã', href: '/docs/examples' },
        { title: '–£—á–µ–±–Ω–∏–∫–∏', description: '–ü–æ—à–∞–≥–æ–≤—ã–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –∏ —É—á–µ–±–Ω–∏–∫–∏', href: '/docs/tutorials' },
        { title: 'GitHub', description: '–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –∏ –≤–∫–ª–∞–¥—ã', href: 'https://github.com/google-gemini/gemini-cli', external: true }
      ]`;

  // Âú®Èü©ËØ≠ÁøªËØëÂêéÊ∑ªÂä†Ë•øÁè≠ÁâôËØ≠Âíå‰øÑËØ≠ÁøªËØë
  content = content.replace(
    '      ]\n    }\n  }\n\n  return content[locale as keyof typeof content] || content.zh',
    `      ]\n    }${spanishTranslation}\n    }${russianTranslation}\n    }\n  }\n\n  return content[locale as keyof typeof content] || content.zh`
  );
  
  // ÂÜôÂõûÊñá‰ª∂
  fs.writeFileSync(filePath, content, 'utf8');
  
  console.log('‚úÖ ÊàêÂäüÊ∑ªÂä†‰∫ÜË•øÁè≠ÁâôËØ≠Âíå‰øÑËØ≠ÁöÑÂÆåÊï¥ÁøªËØë');
  
  return true;
}

// ÊâßË°åÊ∑ªÂä†ÁøªËØë
if (require.main === module) {
  try {
    addFinalAPITranslations();
    console.log('\nüéâ ÊâÄÊúâËØ≠Ë®ÄÁöÑAPIÂèÇËÄÉÁøªËØëÊ∑ªÂä†ÂÆåÊàêÔºÅ');
  } catch (error) {
    console.error('‚ùå Ê∑ªÂä†ÁøªËØëËøáÁ®ã‰∏≠ÂèëÁîüÈîôËØØ:', error);
  }
}

module.exports = { addFinalAPITranslations };
