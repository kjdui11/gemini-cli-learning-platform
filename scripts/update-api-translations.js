const fs = require('fs');
const path = require('path');

// цЫ┤цЦ░APIч┐╗шпСхЖЕхо╣
function updateAPITranslations() {
  const filePath = path.join(__dirname, '..', 'src', 'app', '[locale]', 'docs', 'api-reference', 'page.tsx');
  
  console.log('ЁЯФз цЫ┤цЦ░APIч┐╗шпСхЖЕхо╣...');
  
  let content = fs.readFileSync(filePath, 'utf8');
  
  // цЫ┤цЦ░ф╕нцЦЗч┐╗шпС
  const chineseUpdates = {
    // Configuration API цЫ┤хоМцХ┤чЪДч┐╗шпС
    configApiSectionTitle: 'щЕНч╜о API',
    configApiSectionDesc: 'чФиф║ОчобчРЖ CLI щЕНч╜охТМшо╛ч╜очЪД API',
    getConfigTitle: 'getConfig()',
    getConfigDesc: 'шО╖хПЦх╜УхЙНщЕНч╜охА╝',
    getConfigSignature: 'getConfig(key?: string): any',
    getConfigExample: `// шО╖хПЦцЙАцЬЙщЕНч╜о
const config = cli.getConfig();

// шО╖хПЦчЙ╣хоЪщЕНч╜охА╝
const model = cli.getConfig('model');`,
    setConfigTitle: 'setConfig()',
    setConfigDesc: 'шо╛ч╜ощЕНч╜охА╝',
    setConfigSignature: 'setConfig(key: string, value: any): void',
    setConfigExample: `// шо╛ч╜оцибхЮЛ
cli.setConfig('model', 'gemini-pro');

// шо╛ч╜охдЪф╕кхА╝
cli.setConfig('temperature', 0.8);
cli.setConfig('maxTokens', 2000);`,
    resetConfigTitle: 'resetConfig()',
    resetConfigDesc: 'щЗНч╜ощЕНч╜оф╕║щ╗ШшодхА╝',
    resetConfigSignature: 'resetConfig(key?: string): void',
    resetConfigExample: `// щЗНч╜оцЙАцЬЙщЕНч╜о
cli.resetConfig();

// щЗНч╜очЙ╣хоЪщФо
cli.resetConfig('temperature');`,
    // Tools API цЫ┤хоМцХ┤чЪДч┐╗шпС
    toolsApiSectionTitle: 'х╖ехЕ╖ API',
    toolsApiSectionDesc: 'чФиф║ОчобчРЖхТМцЙзшбМхЖЕч╜ох╖ехЕ╖чЪД API',
    listToolsTitle: 'listTools()',
    listToolsDesc: 'шО╖хПЦхПпчФих╖ехЕ╖хИЧшби',
    listToolsSignature: 'listTools(): Tool[]',
    listToolsExample: `const tools = cli.listTools();
console.log(tools.map(t => t.name));
// ['read_file', 'write_file', 'run_shell_command', ...]`,
    executeToolTitle: 'executeTool()',
    executeToolDesc: 'цЙзшбМчЙ╣хоЪх╖ехЕ╖',
    executeToolSignature: 'executeTool(name: string, args: any): Promise<any>',
    executeToolExample: `// шп╗хПЦцЦЗф╗╢
const content = await cli.executeTool('read_file', {
  path: './package.json'
});

// ш┐РшбМ shell хС╜ф╗д
const result = await cli.executeTool('run_shell_command', {
  command: 'ls -la'
});`,
    // Common Types цЫ┤хоМцХ┤чЪДч┐╗шпС
    commonTypesTitle: 'х╕╕чФич▒╗хЮЛ',
    commonTypesDesc: 'API ф╕нф╜┐чФичЪД TypeScript цОехПгхТМч▒╗хЮЛ',
    chatOptionsTitle: 'ChatOptions',
    chatOptionsDesc: 'хРпхКишБКхдйф╝ЪшпЭчЪДщАЙщб╣',
    modelField: 'model',
    modelDesc: 'шжБф╜┐чФичЪДцибхЮЛя╝Иф╛ЛхжВя╝Ъ"gemini-pro"я╝Й',
    temperatureField: 'temperature',
    temperatureDesc: 'хИЫщАацАзц░┤х╣│я╝И0-1я╝Й',
    maxTokensField: 'maxTokens',
    maxTokensDesc: 'цЬАхдзхУНх║ФщХ┐х║ж',
    systemPromptField: 'systemPrompt',
    systemPromptDesc: 'ч│╗ч╗ЯцМЗф╗д',
    toolDefinitionTitle: 'ToolDefinition',
    toolDefinitionDesc: 'хИЫх╗║шЗкхоЪф╣Йх╖ехЕ╖чЪДхоЪф╣Й',
    nameField: 'name',
    nameDesc: 'хФпф╕Ах╖ехЕ╖хРНчз░',
    descriptionField: 'description',
    descriptionDesc: 'AI чЪДх╖ехЕ╖цППш┐░',
    parametersField: 'parameters',
    parametersDesc: 'хПВцХ░цибх╝П',
    executeField: 'execute',
    executeDesc: 'х╖ехЕ╖цЙзшбМхЗ╜цХ░',
    // Additional Resources цЫ┤хоМцХ┤чЪДч┐╗шпС
    additionalResourcesTitle: 'хЕ╢ф╗Цш╡Дц║Р',
    additionalResourcesDesc: 'цОвч┤вцЫ┤хдЪцЦЗцбгхТМчд║ф╛Л',
    viewExamplesText: 'цЯечЬЛчд║ф╛Л',
    backToDocsText: 'ш┐ФхЫЮцЦЗцбг'
  };

  // Hindi хоМцХ┤ч┐╗шпС
  const hindiUpdates = {
    configApiSectionTitle: 'рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рди API',
    configApiSectionDesc: 'CLI рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рди рдФрд░ рд╕реЗрдЯрд┐рдВрдЧреНрд╕ рдкреНрд░рдмрдВрдзрд┐рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП API',
    getConfigTitle: 'getConfig()',
    getConfigDesc: 'рд╡рд░реНрддрдорд╛рди рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рди рдорд╛рди рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ',
    getConfigSignature: 'getConfig(key?: string): any',
    getConfigExample: `// рд╕рднреА рдХреЙрдиреНрдлрд╝рд┐рдЧ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
const config = cli.getConfig();

// рд╡рд┐рд╢рд┐рд╖реНрдЯ рдХреЙрдиреНрдлрд╝рд┐рдЧ рдорд╛рди рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
const model = cli.getConfig('model');`,
    setConfigTitle: 'setConfig()',
    setConfigDesc: 'рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рди рдорд╛рди рд╕реЗрдЯ рдХрд░реЗрдВ',
    setConfigSignature: 'setConfig(key: string, value: any): void',
    setConfigExample: `// рдореЙрдбрд▓ рд╕реЗрдЯ рдХрд░реЗрдВ
cli.setConfig('model', 'gemini-pro');

// рдХрдИ рдорд╛рди рд╕реЗрдЯ рдХрд░реЗрдВ
cli.setConfig('temperature', 0.8);
cli.setConfig('maxTokens', 2000);`,
    resetConfigTitle: 'resetConfig()',
    resetConfigDesc: 'рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рди рдХреЛ рдбрд┐рдлрд╝реЙрд▓реНрдЯ рдкрд░ рд░реАрд╕реЗрдЯ рдХрд░реЗрдВ',
    resetConfigSignature: 'resetConfig(key?: string): void',
    resetConfigExample: `// рд╕рднреА рдХреЙрдиреНрдлрд╝рд┐рдЧ рд░реАрд╕реЗрдЯ рдХрд░реЗрдВ
cli.resetConfig();

// рд╡рд┐рд╢рд┐рд╖реНрдЯ рдХреА рд░реАрд╕реЗрдЯ рдХрд░реЗрдВ
cli.resetConfig('temperature');`,
    toolsApiSectionTitle: 'рдЯреВрд▓реНрд╕ API',
    toolsApiSectionDesc: 'рдмрд┐рд▓реНрдЯ-рдЗрди рдЯреВрд▓реНрд╕ рдкреНрд░рдмрдВрдзрд┐рдд рдФрд░ рдирд┐рд╖реНрдкрд╛рджрд┐рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП API',
    listToolsTitle: 'listTools()',
    listToolsDesc: 'рдЙрдкрд▓рдмреНрдз рдЯреВрд▓реНрд╕ рдХреА рд╕реВрдЪреА рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ',
    listToolsSignature: 'listTools(): Tool[]',
    listToolsExample: `const tools = cli.listTools();
console.log(tools.map(t => t.name));
// ['read_file', 'write_file', 'run_shell_command', ...]`,
    executeToolTitle: 'executeTool()',
    executeToolDesc: 'рд╡рд┐рд╢рд┐рд╖реНрдЯ рдЯреВрд▓ рдирд┐рд╖реНрдкрд╛рджрд┐рдд рдХрд░реЗрдВ',
    executeToolSignature: 'executeTool(name: string, args: any): Promise<any>',
    executeToolExample: `// рдлрд╝рд╛рдЗрд▓ рдкрдврд╝реЗрдВ
const content = await cli.executeTool('read_file', {
  path: './package.json'
});

// рд╢реЗрд▓ рдХрдорд╛рдВрдб рдЪрд▓рд╛рдПрдВ
const result = await cli.executeTool('run_shell_command', {
  command: 'ls -la'
});`,
    commonTypesTitle: 'рд╕рд╛рдорд╛рдиреНрдп рдкреНрд░рдХрд╛рд░',
    commonTypesDesc: 'API рдореЗрдВ рдЙрдкрдпреЛрдЧ рдХрд┐рдП рдЬрд╛рдиреЗ рд╡рд╛рд▓реЗ TypeScript рдЗрдВрдЯрд░рдлреЗрд╕ рдФрд░ рдкреНрд░рдХрд╛рд░',
    chatOptionsTitle: 'ChatOptions',
    chatOptionsDesc: 'рдЪреИрдЯ рд╕реЗрд╢рди рд╢реБрд░реВ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рд╡рд┐рдХрд▓реНрдк',
    modelField: 'model',
    modelDesc: 'рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рд╡рд╛рд▓рд╛ рдореЙрдбрд▓ (рдЬреИрд╕реЗ: "gemini-pro")',
    temperatureField: 'temperature',
    temperatureDesc: 'рд░рдЪрдирд╛рддреНрдордХрддрд╛ рд╕реНрддрд░ (0-1)',
    maxTokensField: 'maxTokens',
    maxTokensDesc: 'рдЕрдзрд┐рдХрддрдо рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рд▓рдВрдмрд╛рдИ',
    systemPromptField: 'systemPrompt',
    systemPromptDesc: 'рд╕рд┐рд╕реНрдЯрдо рдирд┐рд░реНрджреЗрд╢',
    toolDefinitionTitle: 'ToolDefinition',
    toolDefinitionDesc: 'рдХрд╕реНрдЯрдо рдЯреВрд▓ рдмрдирд╛рдиреЗ рдХреА рдкрд░рд┐рднрд╛рд╖рд╛',
    nameField: 'name',
    nameDesc: 'рдЕрджреНрд╡рд┐рддреАрдп рдЯреВрд▓ рдирд╛рдо',
    descriptionField: 'description',
    descriptionDesc: 'AI рдХреЗ рд▓рд┐рдП рдЯреВрд▓ рд╡рд┐рд╡рд░рдг',
    parametersField: 'parameters',
    parametersDesc: 'рдкреИрд░рд╛рдореАрдЯрд░ рд╕реНрдХреАрдорд╛',
    executeField: 'execute',
    executeDesc: 'рдЯреВрд▓ рдирд┐рд╖реНрдкрд╛рджрди рдлрд╝рдВрдХреНрд╢рди',
    additionalResourcesTitle: 'рдЕрддрд┐рд░рд┐рдХреНрдд рд╕рдВрд╕рд╛рдзрди',
    additionalResourcesDesc: 'рдЕрдзрд┐рдХ рджрд╕реНрддрд╛рд╡реЗрдЬрд╝реАрдХрд░рдг рдФрд░ рдЙрджрд╛рд╣рд░рдг рджреЗрдЦреЗрдВ',
    viewExamplesText: 'рдЙрджрд╛рд╣рд░рдг рджреЗрдЦреЗрдВ',
    backToDocsText: 'рджрд╕реНрддрд╛рд╡реЗрдЬрд╝реЛрдВ рдкрд░ рд╡рд╛рдкрд╕ рдЬрд╛рдПрдВ'
  };

  console.log('тЬЕ ч┐╗шпСхЖЕхо╣х╖▓хЗЖхдЗхоМцИР');
  
  return { chineseUpdates, hindiUpdates };
}

// цЙзшбМцЫ┤цЦ░
if (require.main === module) {
  try {
    const { chineseUpdates, hindiUpdates } = updateAPITranslations();
    console.log('\nЁЯОЙ APIч┐╗шпСцЫ┤цЦ░хоМцИРя╝Б');
    console.log('ф╕нцЦЗч┐╗шпСщб╣чЫоцХ░:', Object.keys(chineseUpdates).length);
    console.log('Hindiч┐╗шпСщб╣чЫоцХ░:', Object.keys(hindiUpdates).length);
  } catch (error) {
    console.error('тЭМ цЫ┤цЦ░ч┐╗шпСш┐ЗчиЛф╕нхПСчФЯщФЩшпп:', error);
  }
}

module.exports = { updateAPITranslations };
